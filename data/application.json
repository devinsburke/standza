{
  "Parameters": {
    "workDayMinimum": {
      "Label": "Required work time per day",
      "DefaultValue": "8",
      "DefaultInterval": "Hour"
    },
    "awayFrequency": {
      "Label": "Desired break frequency",
      "DefaultValue": "2",
      "DefaultInterval": "Hour"
    },
    "awayNowMaximum": {
      "Label": "Desired break length",
      "DefaultValue": "15",
      "DefaultInterval": "Minute"
    },
    "standDayMinimum": {
      "Label": "Desired time standing per day",
      "DefaultValue": "8",
      "DefaultInterval": "Hour"
    },
    "standFrequency": {
      "Label": "Desired standing frequency",
      "DefaultValue": "2",
      "DefaultInterval": "Hour"
    },
    "standNowMaximum": {
      "Label": "Desired standing duration",
      "DefaultValue": "2",
      "DefaultInterval": "Hour"
    }
  },
  "Triggers": {
    "worked-day-minimum": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "notEqual",
          "Comparison": "Absent"
        },
        {
          "Arguments": "states.notAbsent.total",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.workDayMinimum.timespan"
        }
      ],
      "Alert": "Congratulations! You have finished your work day.",
      "Targets": ["Absent"],
      "Achieves": []
    },
    "stood-day-minimum": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "equal",
          "Comparison": "Standing"
        },
        {
          "Arguments": "states.standing.total",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.standDayMinimum.timespan"
        }
      ],
      "Alert": "Congratulations! You have stood for at least {stand_day_minimum}. You may now sit down.",
      "Targets": ["Sitting"],
      "Achieves": []
    },
    "cannot-work-day-minimum": {
      "Conditions": [
        {
          "Arguments": "states.notAbsent.potential",
          "Operator": "lessThanOrEqual",
          "Comparison": "parameters.workDayMinimum.timespan"
        }
      ],
      "Alert": "Attention. You will not finish working by the end of the day unless you stay at your desk for the rest of the day.",
      "Targets": ["Standing", "Sitting"],
      "Achieves": []
    },
    "failed-work-day-minimum": {
      "Conditions": [
        {
          "Arguments": "states.notAbsent.total",
          "Operator": "lessThanOrEqual",
          "Comparison": "parameters.workDayMinimum.timespan"
        },
        {
          "Arguments": "schedule.day.balance",
          "Operator": "lessThanOrEqual",
          "Comparison": 0
        }
      ],
      "Alert": "Attention. It is now after hours but you have not worked a full day. If you continue working, you will be notified when they are met.",
      "Targets": ["Standing", "Sitting"],
      "Achieves": []
    },
    "failed-stand-day-minimum": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "notEqual",
          "Comparison": "Absent"
        },
        {
          "Arguments": "states.standing.total",
          "Operator": "lessThanOrEqual",
          "Comparison": "parameters.standDayMinimum.timespan"
        },
        {
          "Arguments": "schedule.day.balance",
          "Operator": "lessThanOrEqual",
          "Comparison": 0
        }
      ],
      "Alert": "Attention. It is now after hours but you have not stood for your desired hours. If you continue standing while working, you will be notified when you have stood the full duration.",
      "Targets": ["Absent", "Standing", "Sitting"],
      "Achieves": []
    },
    "end-day-clock": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "notEqual",
          "Comparison": "Absent"
        },
        {
          "Arguments": "schedule.day.balance",
          "Operator": "lessThanOrEqual",
          "Comparison": 0
        }
      ],
      "Alert": "Congratulations, it is now after hours. That means your work day is over.",
      "Targets": ["Absent"],
      "Achieves": []
    },
    "stand-now-timer": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "equal",
          "Comparison": "Sitting"
        },
        {
          "Arguments": "states.notStanding.total",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.standFrequency.timespan"
        },
        {
          "Arguments": "states.standing.since",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.standFrequency.timespan"
        }
      ],
      "Alert": "It's time to stand!",
      "Targets": ["Standing"],
      "Achieves": []
    },
    "stand-now-maximum": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "equal",
          "Comparison": "Standing"
        },
        {
          "Arguments": "states.standing.total",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.standNowDuration.timespan"
        },
        {
          "Arguments": "states.sitting.since",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.standNowDuration.timespan"
        }
      ],
      "Alert": "You may now sit down.",
      "Targets": ["Standing", "Sitting"],
      "Achieves": []
    },
    "cannot-stand-day-minimum": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "notEqual",
          "Comparison": "Absent"
        },
        {
          "Arguments": "states.standing.potential",
          "Operator": "lessThanOrEqual",
          "Comparison": "parameters.standDayMinimum.timespan"
        }
      ],
      "Alert": "Attention. You will not reach your goal of standing during work hours unless you stand the rest of the day.",
      "Targets": ["Absent"],
      "Achieves": []
    },
    "away-now-timer": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "notEqual",
          "Comparison": "Absent"
        },
        {
          "Arguments": "states.notAbsent.total",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.awayFrequency.timespan"
        },
        {
          "Arguments": "states.absent.since",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.awayFrequency.timespan"
        }
      ],
      "Alert": "It's time to take a break!",
      "Targets": ["Absent"],
      "Achieves": []
    },
    "away-now-maximum": {
      "Conditions": [
        {
          "Arguments": "state.assumed",
          "Operator": "equal",
          "Comparison": "Absent"
        },
        {
          "Arguments": "states.notAbsent.since",
          "Operator": "greaterThanOrEqual",
          "Comparison": "parameters.absentNowDuration.timespan"
        }
      ],
      "Alert": "Attention. You should now return to your desk.",
      "Targets": ["Standing", "Sitting"],
      "Achieves": []
    }
  },
  "Goals": {
    "work-day-minimum": {
      "Label": "Ensure I work a full day",
      "Description": "Lets you take breaks at your leisure, but warns you when you must work continuously to finish work during scheduled hours. Alerts you when the goal is met, and updates you at the end of scheduled hours.",
      "Sort": 10,
      "Triggers": ["worked-day-minimum", "cannot-work-day-minimum", "failed-work-day-minimum"]
    },
    "work-day-clock": {
      "Label": "Stop working the earliest I can",
      "Description": "Alerts you when the scheduled day ends or you've worked your required number of hours, whichever is first.",
      "Sort": 20,
      "Triggers": ["worked-day-minimum", "end-day-clock"]
    },
    "stand-day-minimum": {
      "Label": "Stand a minimum amount each day",
      "Description": "Lets you stand at your leisure, but warns you when you must stand for the remainder of scheduled hours to meet your goal. Alerts you when the goal is met, and updates you at the end of scheduled hours.",
      "Sort": 30,
      "Triggers": ["stood-day-minimum", "cannot-stand-day-minimum", "failed-stand-day-minimum"]
    },
    "stand-regularly": {
      "Label": "Regularly switch to standing",
      "Description": "Instructs you to stand when you've gone so long without standing. Then notifies you when you may resume sitting.",
      "Sort": 40,
      "Triggers": ["stand-now-timer", "stand-now-maximum"]
    },
    "break-regularly": {
      "Label": "Regularly take a break and walk away",
      "Description": "Instructs you to take a break after working continuously for so long. Then notifies you when it's time to return.",
      "Sort": 50,
      "Triggers": ["away-now-maximum", "cannot-work-day-minimum", "away-now-timer"]
    },
    "break-now-maximum": {
      "Label": "Ensure I am never away too long",
      "Description": "Alerts you any time you have been away from your desk longer than desired.",
      "Sort": 60,
      "Triggers": ["away-now-maximum", "cannot-work-day-minimum"]
    }
  },
  "Visualizations": [
		{
			"Type": "BAN",
			"ContainerId": "hoursStanding",
			"Params": {
        "name": "Standing",
        "valueKey": "states.standing.total",
        "formatter": "toHM"
      }
		},
		{
			"Type": "BAN",
			"ContainerId": "hoursWorked",
			"Params": {
        "name": "Working",
        "valueKey": "states.notAbsent.total",
        "formatter": "toHM"
      }
		},
		{
			"Type": "BAN",
			"ContainerId": "hoursLeftToEOD",
      "Params": {
        "name": "Until End of Day",
        "valueKey": "schedule.day.balance",
        "formatter": "toHM"
      }
		},
		{
			"Type": "Donut",
			"ContainerId": "workProgress",
			"Params": ["Work Day Progress", "Hours", ["states.notAbsent.total", "parameters.workDayMinimum.timespan"]]
		},
		{
			"Type": "Donut",
			"ContainerId": "standProgress",
			"Params": ["Stand Progress", "Hours", ["states.standing.total", "parameters.standDayMinimum.timespan"]]
		},
		{
			"Type": "Bar",
			"ContainerId": "breaksTaken",
			"Params": ["Breaks Taken", "activity", "parameters.absentNowDuration"]
		},
		{
			"Type": "State",
			"ContainerId": "stateTimer",
			"Params": {
        "valueKey": "state.assumed",
        "compareToKey": "state.raw",
        "subtitleKey": "state.duration",
        "formatter": "toHMS"
      }
		},
		{
			"Type": "Clock",
			"ContainerId": "currentTime",
			"Params": []
		}
	]
}
